This is Info file mdebs.info, produced by Makeinfo version 1.68 from
the input file /tmp/sgmltmp.mdebs10631.info.2.

   \input texinfo


File: mdebs.info,  Node: Top,  Next: Introduction,  Up: (dir)

The Minimalistic Double-Entry Bookkeeping System
************************************************

     Nathan L. Cutler
     December 27, 1998

* Menu:

* Introduction::
* Getting Started::
* Running mdebs::
* Fundamental Principles::
* Command Syntax::
* Other Considerations::
* Data Structures::


File: mdebs.info,  Node: Introduction,  Next: Getting Started,  Prev: Top,  Up: Top

Introduction
************

* Menu:

* Version Number::
* Description::
* Copyright and Warranty Information::
* A Few Words from the Author::
* Stage of Development::
* Source and Binary Distributions::


File: mdebs.info,  Node: Version Number,  Next: Description,  Up: Introduction

Version Number
==============

   When this documentation was written, the current `mdebs' version was
0.04.


File: mdebs.info,  Node: Description,  Next: Copyright and Warranty Information,  Prev: Version Number,  Up: Introduction

Description
===========

   The Minimalistic Double-Entry Bookkeeping System (`mdebs') is a
program whose goal is to provide a solution for those who need to do
double-entry bookkeeping under Linux.

   `mdebs' is a program written in ANSI C, supported by some shell
scripts running under bash, and a database implemented using the
PostgreSQL (see http://www.postgresql.org/) backend.


File: mdebs.info,  Node: Copyright and Warranty Information,  Next: A Few Words from the Author,  Prev: Description,  Up: Introduction

Copyright and Warranty Information
==================================

   The `mdebs' program and this documentation is Copyright (C)
1997,1998 by Nathan L. Cutler (the "Author").

   The Author has released `mdebs' under the terms of the GNU General
Public License (GPL), Version 2.  A copy of the GPL is provided in the
top-level directory of the source code distribution in the file
"COPYING".

   If you modify `mdebs' (read the Gnu General Public License before
doing so), please document your modifications in file separate from
this documentation.

   This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

   You should have received a copy of the GNU General Public License
along with this program;  if not, write to the Free Software
Foundation, Inc., 675 Mass Ave., Cambridge, MA 02139, USA.


File: mdebs.info,  Node: A Few Words from the Author,  Next: Stage of Development,  Prev: Copyright and Warranty Information,  Up: Introduction

A Few Words from the Author
===========================

   I decided to write `mdebs' because I couldn't find any free software
that did double-entry bookkeeping.  The philosophy of `mdebs' is to keep
things simple; hence the word "Minimalistic" in the title.

   Being "minimalistic", mdebs does only those tasks that its author
considers essential to double-entry bookkeeping.  With mdebs, you can
set up a Chart of Accounts, make and browse journal entries, and review
movements on any account over a specified time period.

   mdebs is designed to be able to be run in "batch mode", taking
commands from standard input.  This means you can write scripts to do
some of the work for you.  Theoretically, `mdebs' could be used as a
back-end or engine for some kind of GUI-based bookkeeping program.


File: mdebs.info,  Node: Stage of Development,  Next: Source and Binary Distributions,  Prev: A Few Words from the Author,  Up: Introduction

Stage of Development
====================

   While `mdebs' is referred to as "alpha" software, you should feel
free to try it out and send your comments and constructive criticism to
the author, who will be glad to know that someone is using his program.


File: mdebs.info,  Node: Source and Binary Distributions,  Prev: Stage of Development,  Up: Introduction

Source and Binary Distributions
===============================

   Currently, `mdebs' is only available in a source-code distribution.
If you think I should make a binary distribution available, please let
me know.  If you would like to package `mdebs' for a popular Linux
distribution, please go ahead.  I will try to provide any necessary
assistance, but make no promises.


File: mdebs.info,  Node: Getting Started,  Next: Running mdebs,  Prev: Introduction,  Up: Top

Getting Started
***************

* Menu:

* Obtaining the Newest Version::
* Installing PostgreSQL::
* Building mdebs::
* Setting Up Your Installation::
* Installation::


File: mdebs.info,  Node: Obtaining the Newest Version,  Next: Installing PostgreSQL,  Up: Getting Started

Obtaining the Newest Version
============================

   The newest release of `mdebs' is available on
http://web.iol.cz/livingston/mdebs/


File: mdebs.info,  Node: Installing PostgreSQL,  Next: Building mdebs,  Prev: Obtaining the Newest Version,  Up: Getting Started

Installing PostgreSQL
=====================

   Before you bother trying to do anything with `mdebs', you have to
install PostgreSQL.  I recommend using a pre-packaged binary version of
PostgreSQL instead of building it from source, unless you are a
masochist or are trying to prove something.

   As of this writing, the Author was using PostgreSQL version 6.1.
Use earlier versions at your own risk!  Be sure to read the release
notes of whatever version you end up downloading.  Documentation is not
one of PostgreSQL's strong points, but it is there.  There's also a
Database HOWTO which covers PostgreSQL.

   More information about PostgreSQL is available on
http://www.postgresql.org/


File: mdebs.info,  Node: Building mdebs,  Next: Setting Up Your Installation,  Prev: Installing PostgreSQL,  Up: Getting Started

Building mdebs
==============

* Menu:

* System Requirements::
* Build Procedure::


File: mdebs.info,  Node: System Requirements,  Next: Build Procedure,  Up: Building mdebs

System Requirements
-------------------

   In order to build `mdebs', you must have functional installations of
`gcc', `PostgreSQL' (including developer stuff such as include files and
libraries), `GNU make', and `GNU readline'.

   Certain source code files are generated using `bison' and `flex'.  If
you need to regenerate these files (unlikely), you will of course have
to install these fine development tools as well.

   The Author uses the Debian distribution, which contains packaged
binary versions of all of the above software, and much, much more.


File: mdebs.info,  Node: Build Procedure,  Prev: System Requirements,  Up: Building mdebs

Build Procedure
---------------

   `Step 1.' Make sure that the paths in the top-level `Makefile' point
to the correct locations of `libpq-fe.h' and `libpq.so' on your system.
On mine, they're in /usr/include/postgresql and
/usr/lib/postgresql/lib.  The Makefile in the distribution should work
on Debian 2.0 and higher systems using the `postgresql' and
`postgresql-dev' Debian packages.  I'm not sure about Red Hat,
Slackware, or other distributions.

   `Step 2.' Then type "make".  There should be no compiler warnings.
The `mdebs' binary will be generated in the top level directory.  You
may want to move it to /usr/local/bin.  No man pages are provided.
This document is the only documentation there is at this point.


File: mdebs.info,  Node: Setting Up Your Installation,  Next: Installation,  Prev: Building mdebs,  Up: Getting Started

Setting Up Your Installation
============================

   After you successfully build `mdebs', you'll need to do several
things before you run the `mdebs' binary.

   To wit:

  1. Make sure you or your users have the appropriate PostgreSQL
     privileges.  Use the `createuser' command that comes with
     PostgreSQL for this.  Another option is to always run `mdebs' as
     user `postgres', but this is probably not a good idea unless
     you're running a single-user system.

  2. Prepare an `mdebs' batch file with commands to enter your Chart of
     Accounts into the database.  Use the `chart.mdebs' batchfile in the
     `./examples' directory as a model.  See also the section on `mdebs'
     principles, below.  It is important to go over the batch file
     carefully before running `mdebs' to make sure all of the lines in
     it are either comments (starting with [num   ]) or valid `mdebs'
     `INSERT CHART' commands.  Otherwise, `mdebs' will choke on them
     when `dbinit' is run (see next item) and your database will not be
     properly initialized.

  3. Use the `dbinit' script (in the `tools' directory of the `mdebs'
     source distribution) to create and initialize an mdebs database and
     set up its fiscal year and Chart of Accounts.  See the discussion
     of `dbinit' in the Bash Scripts section, below, for details.

  4. Assuming that you'll be using only one `mdebs' database at a time
     (e.g., the current year's bookkeeping for your company), add a
     line similar to `export MDEBSDB=[quot  ]books1998[quot  ]' to your
     profile (I use `[tilde ]/.bash[lowbar]profile').  `mdebs' also has
     a facility for specifying the database on the command line.  Type
     `mdebs -h' for details.


File: mdebs.info,  Node: Installation,  Prev: Setting Up Your Installation,  Up: Getting Started

Installation
============

   After you've built `mdebs', the next step is to install it.  You can
do that by copying the binary to a directory somewhere in your PATH.
Note that some (all?) of the scripts in the ./tools directory don't
assume the binary is in the PATH and require some user editing before
being run.  See the ./tools directory and the Shell Scripts section,
below, for details.

   An integral part of installation is installing the documentation.
At this time there is no man page, because this documentation is being
written on an old version of sgml-tools that has a broken man page
generator.  The file ./doc/mdebs.sgml is the source code for this
documentation and ./doc/mdebs.txt is the resulting output.  For best
viewing results, use `less'.  A "stripped" version, with no bolding or
underlining, is also included.  I've also left the dvi and html
versions generated by sgml-tools, in the hope they will be useful.


File: mdebs.info,  Node: Running mdebs,  Next: Fundamental Principles,  Prev: Getting Started,  Up: Top

Running mdebs
*************

   `mdebs' comes with a number of command line options and environment
variables to influence how `mdebs' behaves when it is run.  Some of the
command line options (the ones without short equivalents) are intended
for use from bash scripts and the like and do not produce any output.

* Menu:

* Command Line Options::
* Environment Variables::
* Files::


File: mdebs.info,  Node: Command Line Options,  Next: Environment Variables,  Up: Running mdebs

Command Line Options
====================

   The `mdebs' command line looks like this:

     mdebs [options]

   where `[options]' can be one or more of the following:

`--help[verbar]-h'
     Print out a helpful message.

`--version[verbar]-v'
     Version information.

`--prompt[verbar]-p (arg)'
     Sets prompt for mdebs to use

`--verbose[verbar]-V'
     Instructs mdebs to be more verbose.  This has the effect of
     displaying "mdebs[lowbar]msg" priority messages and can generally
     be considered useful.

`--db[verbar]-D (arg)'
     Instructs mdebs to use a database different than MDEBSDB

`--validate (arg)'
     (Intended for use from shell scripts) Instructs mdebs to check a
     string to see whether it constitutes a valid YYYYMMDD format date.

`--initialize'
     (Intended for use from shell scripts) Instructs mdebs to set up a
     table structure in the database pointed to by MDEBSDB, which is
     assumed to be empty.

`--existdb (arg)'
     (Intended for use from shell scripts) Determine if a database
     exists


File: mdebs.info,  Node: Environment Variables,  Next: Files,  Prev: Command Line Options,  Up: Running mdebs

Environment Variables
=====================

`MDEBSDB'
     Database to use when mdebs is invoked.

`PAGER'
     Pager to invoke when browsing query results.

`HOME'
     Full path of the user's home directory.

`TMPDIR'
     Where to store temporary files.

`MDEBSDIR'
     Full path of the mdebs installation (src) directory.


File: mdebs.info,  Node: Files,  Prev: Environment Variables,  Up: Running mdebs

Files
=====

* Menu:

* $MDEBSDIR (top-level directory of distribution)::
* $MDEBSDIR/doc/*::
* $MDEBSDIR/extras/*::
* $MDEBSDIR/tools/*::


File: mdebs.info,  Node: $MDEBSDIR (top-level directory of distribution),  Next: $MDEBSDIR/doc/*,  Up: Files

$MDEBSDIR (top-level directory of distribution)
-----------------------------------------------

   This directory contains the "guts" of `mdebs', to wit:
`GPL'
     The GNU General Public License, Version 2, under which `mdebs' is
     distributed.

`Makefile'
     The file used by `GNU make' to govern the build process.

`README'
     A brief description of `mdebs'.

`dbinit.c and dbinit.h'
     C source code of the function(s) for initializing new databases.
     Contains the SQL `CREATE TABLE' queries.

`delete.c and delete.h'
     C source code of functions used to delete `mdebs' objects such as
     Chart of Accounts entries, journal entries, etc.

`doc subdirectory'
     Directory containing the `mdebs' documentation (see below).

`dump.c and dump.h'
     C source code of functions used to generate `mdebs' "reports",
     i.e. lists of accounts, journal entries, etc.

`enviro.c and enviro.h'
     C source code of functions used to query and manipulate
     environment variables, mainly `MDEBSDB'.  This allows the user to
     dynamically change from one database to another without exiting
     `mdebs'.

`examples subdirectory'
     This subdirectory contains examples illustrating how `mdebs' can
     be used in "batch mode".  One of the examples is a sample Chart of
     Accounts initialization file intended for use with the `dbinit'
     script, which is in the `tools' subdirectory.

`extras subdirectory'
     Examples of how `mdebs' can be used as a "back-end" to shell
     scripts to ease the process of journal entry.  These examples
     assume you have `dialog' installed.  [lsqb  ]Anything else in
     here?]

`generalized.c and generalized.h'
     As their names would suggest, these files contain "library"
     functions that are used throughout `mdebs' to do things like check
     date formats, etc.

`insert.c and insert.h'
     C source code of functions used to insert all types of `mdebs' data
     objects except journal entries.

`journal.c and journal.h'
     C source code of functions dealing with journal entries.

`lex.yy.c'
     Lexical scanner created by `flex' from the `mdebs.yy' file.
     Included in the distribution to reduce the number of software
     packages that have to be installed in order to build `mdebs'.

`mdebs'
     The mdebs binary.

`mdebs.h'
     Include file containing declarations and pre-processor directives
     intended to be global to all `mdebs' functions.

`mdebs.tab.c and mdebs.tab.h'
     C source code files generated by `bison' from the `mdebs.y' file.
     This is where the `main()' function is located.  This is where
     command-line parameters get processed, user input gets parsed, etc.

`mdebs.y and mdebs.yy'
     Files containing source intended for processing by `bison' and
     `flex', respectively.  These files define how the parsing engine
     behaves.

`messages-EN.h file and messages.h symbolic link'
     Include file containing pre-processor directives that define the
     text of various messages and output that may be generated by
     `mdebs' from time to time.  See the section "Translating `mdebs'
     into other languages", below.

`messages.c'
     C source code of functions used to "say" things to the user.  This
     is to be distinguished from the code used to generate "reports"
     (account listings, journal listings, etc.)  The format of these
     listings and their column headings are hardwired for the time
     being.  See the section "Translating `mdebs' into other
     languages", below.

`pgresfunc.c and pgresfunc.h'
     C source code of functions used to communicate with the PostgreSQL
     back-end.

`query.c and query.h'
     C source code of functions used to process `mdebs' commands that
     start with `QUERY'.

`scratch subdirectory'
     Subdirectory containing junk files I haven't gotten up the courage
     to delete yet.  (Hey, that might be useful someday!)

`tokenlen.h'
     Include file used in `mdebs.y' and `mdebs.yy'.  Something to do
     with the parser.

`tools subdirectory'
     Subdirectory containing shell scripts for use in administering
     `mdebs'.  See the discussion of the `tools' subdirectory, below.


File: mdebs.info,  Node: $MDEBSDIR/doc/*,  Next: $MDEBSDIR/extras/*,  Prev: $MDEBSDIR (top-level directory of distribution),  Up: Files

$MDEBSDIR/doc/*
---------------

   Files that, taken as a whole, constitute the documentation to
`mdebs'.

`File 1'

`File 2, etc.'

File: mdebs.info,  Node: $MDEBSDIR/extras/*,  Next: $MDEBSDIR/tools/*,  Prev: $MDEBSDIR/doc/*,  Up: Files

$MDEBSDIR/extras/*
------------------

   Various goodies.

`File 1'

`File 2, etc.'

File: mdebs.info,  Node: $MDEBSDIR/tools/*,  Prev: $MDEBSDIR/extras/*,  Up: Files

$MDEBSDIR/tools/*
-----------------

   Shell scripts for use in administering mdebs.  I'll sacrifice the
structural purity of this document and put the documentation to these
scripts here.

* Menu:

* dbinit - Database (re)initialization script::
* pgcopy-backup::
* postgres-backup::


File: mdebs.info,  Node: dbinit - Database (re)initialization script,  Next: pgcopy-backup,  Up: $MDEBSDIR/tools/*

dbinit - Database (re)initialization script
...........................................

   Like `mdebs' itself, `dbinit' gets the name of the database to be
initialized from the `MDEBSDB' environment variable.  The algorithm
that `dbinit' uses can be summarized as follows:

  1. If MDEBSDB enviro-variable is defined, ask user if s/he wants to
     use this as the database to be (re)initialized; if not, ask user
     for different database name

  2. Get fiscal year starting and ending dates from user

  3. Get path and filename of file containing commands for initializing
     the Chart of Accounts

  4. If database already exists, ask for user confirmation before
     destroying it

  5. (Re)create the database

  6. Set up the fiscal year of the database

  7. Set up the initial Chart of Accounts (both the fiscal year and the
     Chart of Accounts can be changed at will later)

   Using `dbinit', you can set up as many mdebs databases as you like.
Each database covers one fiscal year, or, more precisely, the time
between the beginning and ending dates specified as arguments to the
`dbinit' script when the database was initialized.

   Be careful with `dbinit'.  I've made an effort to make the script be
careful and warn the user if an existing database is specified, but it
only asks once... So keep in mind that you could reinitialize (read
lose) a database with real data if you're not careful.

   [lsqb  ]This would be a good place for a pointer to a section
describing how to back up mdebs databases, including instructions on
how to restore them from backups.]

   Before you first run `dbinit', you'll have to edit the script to
make sure the `MDEBSDIR' variable points to the directory containing
the `mdebs' binary.  Read the comments at the beginning of the file; it
should be fairly self-explanatory.


File: mdebs.info,  Node: pgcopy-backup,  Next: postgres-backup,  Prev: dbinit - Database (re)initialization script,  Up: $MDEBSDIR/tools/*

pgcopy-backup
.............

   Description of the pgcopy-backup script.


File: mdebs.info,  Node: postgres-backup,  Prev: pgcopy-backup,  Up: $MDEBSDIR/tools/*

postgres-backup
...............

   Description of teh postgres-backup script.


File: mdebs.info,  Node: Fundamental Principles,  Next: Command Syntax,  Prev: Running mdebs,  Up: Top

Fundamental Principles
**********************

* Menu:

* Dates::
* Accounts::
* Account Shortcuts::
* Monetary Amounts::
* Account Document Field::
* Chart of Accounts::
* Making Journal Entries::


File: mdebs.info,  Node: Dates,  Next: Accounts,  Up: Fundamental Principles

Dates
=====

   Dates must always be specified in the format `YYYYMMDD'.  That means
19980101 is January 1, 1998 and 19981231 is December 31, 1998.  Don't
even think of asking me to change this.


File: mdebs.info,  Node: Accounts,  Next: Account Shortcuts,  Prev: Dates,  Up: Fundamental Principles

Accounts
========

   Accounts are referred to as `[lsqb  ]major-number] [lsqb  ]space]
[lsqb  ]hyphen] [lsqb  ]minor-number]'.  The major number is a
three-digit numeric string (000-999) and the minor number is a
two-digit numeric string (00-99).  You can use an asterisk ("*")
instead of the minor number in some cases to refer to all accounts with
a particular major number.  Examples of valid account numbers are

     010 - 01
     910 - 00
     222 - *

   The above needs to be changed to [lsqb  ]major-number][lsqb
]hyphen][lsqb  ]major-number] by revising the lexical rules, the bison
mdebs.y file, and implementing functions to parse the major and minor
numbers out of the string.  All 222 accounts could be specified either
as "222-" or "222-*".


File: mdebs.info,  Node: Account Shortcuts,  Next: Monetary Amounts,  Prev: Accounts,  Up: Fundamental Principles

Account Shortcuts
=================

   Need to write code and change table structure to enable use of
"Account Shortcuts", i.e. a VARCHAR-type account identification field
to provide: (a) an alternate account naming scheme that's more flexible
and user-friendly than the major-minor number scheme, which is taken
from Czech Republic accounting legislation, and (b) a way to allow the
user to group items together without making exceptions to the
major-minor numbers; this would be useful, for example, to a manager
who wants to monitor the costliness of a project.  Just set up an
Account Shortcut for the project (call it "PROJ1") and include that in
all entries related to the project. Then run a DUMP SHORTCUT PROJ1
command in `mdebs'.

   The shortcuts code has to make sure that the shortcut is optional.


File: mdebs.info,  Node: Monetary Amounts,  Next: Account Document Field,  Prev: Account Shortcuts,  Up: Fundamental Principles

Monetary Amounts
================

   `mdebs' assumes that all monetary amounts will be entered in a
currency that can be broken down into 100 smaller units (i.e.
dollars/cents, pounds/pence, marks/pfennigs, korunas/hellers, etc.).
It further assumes that monetary amounts will be entered as integers in
the smaller units.  If you're keeping your books in dollars, this means
you must enter all amounts in cents.  Thus, for `mdebs' 100 means one
dollar, 101 means $1.01, etc.  When `mdebs' prints out information, it
puts in the decimal point, but it won't accept decimal input.  This can
be confusing at first.


File: mdebs.info,  Node: Account Document Field,  Next: Chart of Accounts,  Prev: Monetary Amounts,  Up: Fundamental Principles

Account Document Field
======================

     [Need to implement and document; should be fairly straightforward.]


File: mdebs.info,  Node: Chart of Accounts,  Next: Making Journal Entries,  Prev: Account Document Field,  Up: Fundamental Principles

Chart of Accounts
=================

   If you're interested in using `mdebs', you either already know all
about double-entry bookkeeping and already have a Chart of Accounts for
your company, in which case it's just a matter of converting your
account number scheme to use the `mdebs' convention (see above), or you
figure you're going to use `mdebs' to learn about double-entry
bookkeeping, in which case you can easily use the example Chart of
Accounts provided in the `chart.mdebs' batchfile in the `examples'
directory of the source distribution.

     [Talk about using Account Shortcuts as an alternate or supplemental account
     specification system.]


File: mdebs.info,  Node: Making Journal Entries,  Prev: Chart of Accounts,  Up: Fundamental Principles

Making Journal Entries
======================

   When you run `mdebs' from the shell prompt with the `MDEBSDB'
environment variable pointing to an initialized `mdebs' database, you
are presented with an `mdebs' prompt.  At this prompt you can either
enter an `mdebs' command (see section on Command Syntax, below), or
begin a journal entry.

   Journal entries consist of a first line, containing the date and
description of the journal entry in the format `YYYYMMDD "text"' (the
quotes are necessary if the description is to consist of more than one
word), and at least two lines describing movements on various accounts.
For example, if your company issues an invoice for services rendered,
you might make a journal entry called "Invoice for services rendered"
with a debit entry to Accounts Receivable and a credit entry to
Revenues.  Assuming that "311 - 00" is your Accounts Receivable account
and "518 - 00" is your Revenues account, your journal entry might look
something like this:

     mdebs-> 19980101 "Invoice for services rendered"
     mdebs-> 311 - 00 12100 0
     mdebs-> 518 - 00 0 12100
     mdebs->

   The ending newline signals `mdebs' the end of the journal entry.  If
the journal entry passes the various checks (valid date, existing
accounts, and balanced debit/credit sides), `mdebs' will insert the
entry into the database.

   Journal entries can be more complicated.  For example, in some parts
of the world, companies have to charge VAT on their invoices.  Assuming
a VAT rate of 5[percnt] and assuming the appropriate VAT account is
"343 - 01", the above journal entry might look like this:

     mdebs-> 19980101 "Invoice for services rendered"
     mdebs-> 311 - 00 12100 0
     mdebs-> 343 - 01 0 576
     mdebs-> 518 - 00 0 11524
     mdebs->

   Take extra special care to avoid making duplicate journal entries.
My method for avoiding this is to keep accounting documents (invoices,
receipts, etc.) in a pile until I sit down to do bookkeeping.  As I make
journal entries for each accounting document, I put them in a binder.
This helps keep the paper documentation in line with the books in the
computer.


File: mdebs.info,  Node: Command Syntax,  Next: Other Considerations,  Prev: Fundamental Principles,  Up: Top

Command Syntax
**************

   `mdebs' commands consist of three components: "verb" (e.g., DUMP,
QUERY, INSERT) indicating what type of operation to perform, an
"object" (e.g., JOURNAL, CHART, ACCOUNT) indicating the type of data to
be used in the operation, and "the rest", which varies from case to
case (could be a range of dates for a DUMP command, or data to be
inserted in the case of an INSERT).

   Commands are to be distinguished from journal entries, which are
complex and use a completely different syntax.  Commands are always
entered on a single line, whereas journal entries take up several
lines.  Journal entries are discussed in the Fundamental Principles
section, above.

   `DUMP'

   These commands generate ("dump") reports, or lists, of accounting
data.

   `DUMP CHART'

   Lists the Chart of Accounts.

   The command takes no arguments.  Its output is a table describing
the Chart of Accounts for the current database.

   `DUMP ACCOUNT'

   Generates a report giving movements on an account over a specified
time period.

   The command takes an account number (or shortcut) argument and an
optional date range.  If no date range is specified, the entire fiscal
year is assumed.  The command's output is a table containing all
movements on the given account during the period specified.  At the
end, debit and credit totals are written.  This program can be useful
in monthly, quarterly, and annual closings, VAT closings, etc.  If the
beginning and ending dates are the same, it prints out all movements
for a particular day.

   A series of `DUMP ACCOUNT' commands could be used to print out a
General Ledger for any given period.

   `DUMP JOURNAL' (see `QUERY JOURNAL)'

   Dumps the journal (book of original entry) for specified date range.

   `QUERY'

   These commands generally output a single item, or are used to
determine whether something exists or not.

   `QUERY JOURNAL [lsqb  ]date] [lsqb  ]ser[lowbar]num]'

   Given a date and serial number of a particular journal entry, this
command outputs the journal entry as it might look in an actual
journal.  This command can be used in conjunction with `DUMP ACCOUNT'
to analyze account movements.

   `[lsqb  ]Various shell scripts for making journal entries]'

   These shell scripts use the `dialog' program in an attempt to
provide a user-friendly way to enter journal entries into datafiles.
Just choose the type of journal entry you want to make, provide the
correct information, and the script runs `mdebs' for you.


File: mdebs.info,  Node: Other Considerations,  Next: Data Structures,  Prev: Command Syntax,  Up: Top

Other Considerations
********************

* Menu:

* Making Backups::
* Making Bug Reports::
* Tweaking for Speed::
* Translating mdebs into Other Languages::


File: mdebs.info,  Node: Making Backups,  Next: Making Bug Reports,  Up: Other Considerations

Making Backups
==============

   After you have used `mdebs' for some time (say, a month or two),
you'll probably want to start making backups of your data.


File: mdebs.info,  Node: Making Bug Reports,  Next: Tweaking for Speed,  Prev: Making Backups,  Up: Other Considerations

Making Bug Reports
==================

   Send bug reports to the Author.


File: mdebs.info,  Node: Tweaking for Speed,  Next: Translating mdebs into Other Languages,  Prev: Making Bug Reports,  Up: Other Considerations

Tweaking for Speed
==================

   You may find `mdebs' a bit slow.  One possible reaons is that it uses
relational SQL queries that take time for the PostgreSQL back-end to
process.  Another possible reason is that you have no indices.

     [ Section on creating and updating indices? ]
     [ What indices are most useful? ]
     [ How fast is mdebs on the author's system? ]


File: mdebs.info,  Node: Translating mdebs into Other Languages,  Prev: Tweaking for Speed,  Up: Other Considerations

Translating mdebs into Other Languages
======================================

   The Author has made an attempt to "facilitate" the translation of
`mdebs' into other languages.  Messages are divided into three priority
levels:  Error, Result, and Message.  When `mdebs' is run in "quiet"
mode (without the `-verbose' switch), Message-priority messages are
suppressed.  Error messages and Results (i.e., messages produced in
response to a user command) are never suppressed.  Each message is
defined using a pre-processor directive, as opposed to appearing
embedded in the guts of the code.  To translate `mdebs' to another
language, copy messages-EN.h to a file such as messages-CZ.h (for the
Czech language, for instance), translate the text of all the messages,
change the messages.h symbolic link to point to messages-CZ.h, and
rebuild `mdebs'.

   This is an interim solution; I should be using i18n message catalogs
but I haven't gotten around to that yet.


File: mdebs.info,  Node: Data Structures,  Prev: Other Considerations,  Up: Top

Data Structures
***************

* Menu:

* fiscyear - Fiscal Year Table::
* osnova - Chart of Accounts Table::
* descs - Journal Entry Descriptions Table::
* porad - Journal Entry Serial Number Table::
* denik - Journal Entry Accounts and Amounts Table::


File: mdebs.info,  Node: fiscyear - Fiscal Year Table,  Next: osnova - Chart of Accounts Table,  Up: Data Structures

fiscyear - Fiscal Year Table
============================

   The table `fiscyear' defines the fiscal year.  The field `startd' is
the starting date, and `endd' is the ending date.

   * startd (DATE)

   * endd (DATE)


File: mdebs.info,  Node: osnova - Chart of Accounts Table,  Next: descs - Journal Entry Descriptions Table,  Prev: fiscyear - Fiscal Year Table,  Up: Data Structures

osnova - Chart of Accounts Table
================================

   The table `osnova' defines the Chart of Accounts.  `acct' is the
account's code (up to three characters), `anal' is a two-character
sub-account ("analytical") code, and `desig' is a description of the
account.

   * acct (CHAR(3))

   * anal (CHAR(2))

   * desig (VARCHAR(60))


File: mdebs.info,  Node: descs - Journal Entry Descriptions Table,  Next: porad - Journal Entry Serial Number Table,  Prev: osnova - Chart of Accounts Table,  Up: Data Structures

descs - Journal Entry Descriptions Table
========================================

   The table `descs' holds the journal entries, and contains the fields
`ent[lowbar]date' (Entry Date) and `por[lowbar]cislo' (Serial Number),
which together constitute a link to the `denik' (Journal) table.  In
addition, `descs' contains a field `desig', which describes the journal
entry.

   * ent[lowbar]date (DATE)

   * por[lowbar]cislo (INT)

   * desig (VARCHAR(80))


File: mdebs.info,  Node: porad - Journal Entry Serial Number Table,  Next: denik - Journal Entry Accounts and Amounts Table,  Prev: descs - Journal Entry Descriptions Table,  Up: Data Structures

porad - Journal Entry Serial Number Table
=========================================

   The table `porad' (Serial) is a funny little table made necessary by
the relationship between the tables `descs' and `denik' (Journal).  When
journal entries are being added to the database the program has to be
able to determine the last serial number used for a particular day.  It
does so by looking up the value of `max[lowbar]cislo' (Maximum Number)
for the particular day in this table.

   * ent[lowbar]date (DATE)

   * max[lowbar]cislo (INT)


File: mdebs.info,  Node: denik - Journal Entry Accounts and Amounts Table,  Prev: porad - Journal Entry Serial Number Table,  Up: Data Structures

denik - Journal Entry Accounts and Amounts Table
================================================

   Last, but certainly not least, is the table `denik' (Journal), which
contains fields describing a journal entry.  The `ent[lowbar]date' and
`por[lowbar]cislo' (Serial Number) fields point to the `descs' table.
The `[lsqb  ]m]d[lowbar]acct' (Debit/Credit Major Number) and `[lsqb
]m]d[lowbar]anal' (Debit/Credit Minor Number) fields point to the
`osnova' (Chart) table (in other words, the latter contain account
numbers for debit and credit amounts).  The `[lsqb  ]m]d[lowbar]amt'
(Debit/Credit Amount) fields contain debit and credit amounts.  Amounts
are represented as integers in the database.  When asked to display
movements on accounts, `mdebs' will display the amounts with a decimal
point, but this is just a cosmetic feature for user comfort.  Each
record is like one line of a journal entry; either the debit or the
credit side will be zero.  When all entries matching a certain date and
serial number are added together, the debit and credit sides must be
equal.

   * ent[lowbar]date (DATE)

   * por[lowbar]cislo (INT)

   * md[lowbar]acct  (CHAR(3))

   * md[lowbar]anal (CHAR(2))

   * md[lowbar]amt (INT)

   * d[lowbar]acct (CHAR(3))

   * d[lowbar]anal (CHAR(2))

   * d[lowbar]amt (INT)



Tag Table:
Node: Top136
Node: Introduction502
Node: Version Number793
Node: Description985
Node: Copyright and Warranty Information1496
Node: A Few Words from the Author2618
Node: Stage of Development3567
Node: Source and Binary Distributions3968
Node: Getting Started4453
Node: Obtaining the Newest Version4721
Node: Installing PostgreSQL4975
Node: Building mdebs5800
Node: System Requirements6017
Node: Build Procedure6671
Node: Setting Up Your Installation7491
Node: Installation9362
Node: Running mdebs10403
Node: Command Line Options10895
Node: Environment Variables12043
Node: Files12485
Node: $MDEBSDIR (top-level directory of distribution)12709
Node: $MDEBSDIR/doc/*17011
Node: $MDEBSDIR/extras/*17283
Node: $MDEBSDIR/tools/*17477
Node: dbinit - Database (re)initialization script17849
Node: pgcopy-backup19803
Node: postgres-backup20019
Node: Fundamental Principles20189
Node: Dates20494
Node: Accounts20770
Node: Account Shortcuts21634
Node: Monetary Amounts22563
Node: Account Document Field23307
Node: Chart of Accounts23559
Node: Making Journal Entries24359
Node: Command Syntax26610
Node: Other Considerations29240
Node: Making Backups29507
Node: Making Bug Reports29763
Node: Tweaking for Speed29962
Node: Translating mdebs into Other Languages30497
Node: Data Structures31582
Node: fiscyear - Fiscal Year Table31922
Node: osnova - Chart of Accounts Table32262
Node: descs - Journal Entry Descriptions Table32780
Node: porad - Journal Entry Serial Number Table33421
Node: denik - Journal Entry Accounts and Amounts Table34159

End Tag Table
